{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst _require = require('ipld-dag-pb'),\n      DAGNode = _require.DAGNode;\n\nconst _require2 = require('buffer'),\n      Buffer = _require2.Buffer;\n\nconst configure = require('../lib/configure');\n\nconst toFormData = require('../lib/buffer-to-form-data');\n\nmodule.exports = configure(({\n  ky\n}) => {\n  return async (obj, options) => {\n    options = options || {};\n    let tmpObj = {\n      Data: null,\n      Links: []\n    };\n\n    if (Buffer.isBuffer(obj)) {\n      if (!options.enc) {\n        tmpObj = {\n          Data: obj.toString(),\n          Links: []\n        };\n      }\n    } else if (DAGNode.isDAGNode(obj)) {\n      tmpObj = {\n        Data: obj.Data.toString(),\n        Links: obj.Links.map(l => ({\n          Name: l.Name,\n          Hash: l.Hash.toString(),\n          Size: l.Tsize\n        }))\n      };\n    } else if (typeof obj === 'object') {\n      tmpObj.Data = obj.Data.toString();\n      tmpObj.Links = obj.Links;\n    } else {\n      throw new Error('obj not recognized');\n    }\n\n    let buf;\n\n    if (Buffer.isBuffer(obj) && options.enc) {\n      buf = obj;\n    } else {\n      buf = Buffer.from(JSON.stringify(tmpObj));\n    }\n\n    const searchParams = new URLSearchParams(options.searchParams);\n    if (options.enc) searchParams.set('inputenc', options.enc);\n    if (options.pin != null) searchParams.set('pin', options.pin);\n    if (options.quiet != null) searchParams.set('quiet', options.quiet);\n\n    const _ref = await ky.post('object/put', {\n      timeout: options.timeout,\n      signal: options.signal,\n      headers: options.headers,\n      searchParams,\n      body: toFormData(buf)\n    }).json(),\n          Hash = _ref.Hash;\n\n    return new CID(Hash);\n  };\n});","map":null,"metadata":{},"sourceType":"script"}