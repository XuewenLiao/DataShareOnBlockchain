{"ast":null,"code":"'use strict';\n\nconst configure = require('../lib/configure');\n\nconst _require = require('buffer'),\n      Buffer = _require.Buffer;\n\nconst CID = require('cids');\n\nconst ndjson = require('iterable-ndjson');\n\nconst toIterable = require('stream-to-it/source');\n\nconst toCamel = require('../lib/object-to-camel');\n\nmodule.exports = config => {\n  const refs = configure(({\n    ky\n  }) => {\n    return async function* refs(args, options) {\n      options = options || {};\n      const searchParams = new URLSearchParams();\n\n      if (options.format !== undefined) {\n        searchParams.set('format', options.format);\n      }\n\n      if (options.edges !== undefined) {\n        searchParams.set('edges', options.edges);\n      }\n\n      if (options.unique !== undefined) {\n        searchParams.set('unique', options.unique);\n      }\n\n      if (options.recursive !== undefined) {\n        searchParams.set('recursive', options.recursive);\n      }\n\n      if (options.maxDepth !== undefined) {\n        searchParams.set('max-depth', options.maxDepth);\n      }\n\n      if (!Array.isArray(args)) {\n        args = [args];\n      }\n\n      for (const arg of args) {\n        searchParams.append('arg', \"\".concat(Buffer.isBuffer(arg) ? new CID(arg) : arg));\n      }\n\n      const res = await ky.post('refs', {\n        timeout: options.timeout,\n        signal: options.signal,\n        headers: options.headers,\n        searchParams\n      });\n\n      for await (const file of ndjson(toIterable(res.body))) {\n        yield toCamel(file);\n      }\n    };\n  })(config);\n  refs.local = require('./local')(config);\n  return refs;\n};","map":null,"metadata":{},"sourceType":"script"}