{"ast":null,"code":"var _jsxFileName = \"D:\\\\LXW\\\\truffle_proj\\\\qodpro\\\\dataTruffleSys\\\\client\\\\src\\\\views\\\\UploadManage.js\";\nimport Button from 'antd/lib/button';\nimport { getOrigData, sendData } from '../methodTool';\n\nconst React = require('react');\n\nconst ipfsClient = require('ipfs-http-client');\n\nconst ipfs = ipfsClient('/ip4/127.0.0.1/tcp/5001');\nlet origData;\n\nclass UploadManage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.start = () => {\n      getOrigData().then(res => {\n        console.log(\"res==\", res); // origData = res\n\n        this.setState({\n          origData: res\n        });\n        console.log(\"origData==\", this.state.origData);\n        console.log(\"type==\", typeof this.state.origData);\n      });\n    };\n\n    this.uploadIpfs = async origData => {\n      console.log(\" uploadorigData==\", origData);\n      console.log(\" uploadtype==\", typeof origData);\n\n      for (var i in origData) {\n        const source = JSON.stringify(origData[i]['datacontent']);\n        console.log(\"eachData.datacontent==\", source);\n        console.log(\"sourceType\", typeof source); //上传IPFS获取hash\n\n        for await (const file of ipfs.add(source)) {\n          console.log(\"file\", file);\n          const hash = file.path;\n          console.log(\"file_hash: \", hash); //将Hash存到origData的ipfsdatahash字段\n\n          origData[i].ipfsdatahash = hash;\n          console.log(\"origData[i]==\", origData[i]);\n        }\n      }\n\n      this.setState({\n        isSuccess: \"上传成功\"\n      });\n      console.log(\"newData==\", origData); //发送数据给后台\n\n      sendData(origData).then(res => {\n        console.log(\"sendRes==\", res[\"result\"]);\n      });\n    };\n\n    this.state = {\n      isSuccess: null,\n      origData: null\n    };\n  }\n\n  componentDidMount() {\n    this.start();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      style: {\n        textAlign: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      onClick: () => this.uploadIpfs(this.state.origData),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"\\u4E0A\\u4F20\\u81F3IPFS\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"\\u4E0A\\u4F20\\u72B6\\u6001\\uFF1A \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, JSON.stringify(this.state.isSuccess))));\n  }\n\n}\n\nexport default UploadManage; // import React, { Component } from \"react\";\n// class Product extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = { };\n//   }\n//   render() {\n//     return (\n//         <div>\n//           Product\n//         </div>\n//     );\n//   }\n// }\n// export default Product;","map":{"version":3,"sources":["D:\\LXW\\truffle_proj\\qodpro\\dataTruffleSys\\client\\src\\views\\UploadManage.js"],"names":["Button","getOrigData","sendData","React","require","ipfsClient","ipfs","origData","UploadManage","Component","constructor","props","start","then","res","console","log","setState","state","uploadIpfs","i","source","JSON","stringify","file","add","hash","path","ipfsdatahash","isSuccess","componentDidMount","render","textAlign"],"mappings":"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","sourcesContent":["import Button from 'antd/lib/button';\r\nimport { getOrigData,sendData } from '../methodTool'\r\nconst React = require('react')\r\n\r\nconst ipfsClient = require('ipfs-http-client')\r\nconst ipfs = ipfsClient('/ip4/127.0.0.1/tcp/5001')\r\n\r\nlet origData;\r\nclass UploadManage extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      isSuccess: null,\r\n      origData: null,\r\n\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    this.start();\r\n\r\n  }\r\n\r\n\r\n  start = () => {\r\n    getOrigData().then(res => {\r\n      console.log(\"res==\", res)\r\n      // origData = res\r\n      this.setState({\r\n        origData: res\r\n      });\r\n      console.log(\"origData==\", this.state.origData);\r\n      console.log(\"type==\", typeof (this.state.origData));\r\n    })\r\n\r\n  };\r\n\r\n\r\n\r\n  uploadIpfs = async (origData) => {\r\n    console.log(\" uploadorigData==\", origData);\r\n    console.log(\" uploadtype==\", typeof (origData));\r\n\r\n    for (var i in origData) {\r\n\r\n      const source = JSON.stringify(origData[i]['datacontent']);\r\n      console.log(\"eachData.datacontent==\", source);\r\n      console.log(\"sourceType\", typeof (source));\r\n\r\n      //上传IPFS获取hash\r\n      for await (const file of ipfs.add(source)) {\r\n        console.log(\"file\", file)\r\n        const hash = file.path\r\n        console.log(\"file_hash: \", hash)\r\n\r\n        //将Hash存到origData的ipfsdatahash字段\r\n        origData[i].ipfsdatahash = hash\r\n        console.log(\"origData[i]==\", origData[i])\r\n      }\r\n    }\r\n\r\n    this.setState({ isSuccess: \"上传成功\" })\r\n    console.log(\"newData==\", origData)\r\n\r\n    //发送数据给后台\r\n      sendData(origData).then(res => {\r\n        console.log(\"sendRes==\", res[\"result\"])\r\n      })\r\n  }\r\n\r\n\r\n  render() {\r\n    return <div style={{ textAlign: 'center' }}>\r\n      <Button type=\"primary\" onClick={() => this.uploadIpfs(this.state.origData)}>上传至IPFS</Button>\r\n      <p>上传状态： <strong>{JSON.stringify(this.state.isSuccess)}</strong></p>\r\n    </div>\r\n  }\r\n}\r\nexport default UploadManage\r\n\r\n\r\n// import React, { Component } from \"react\";\r\n\r\n// class Product extends Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//     this.state = { };\r\n//   }\r\n\r\n//   render() {\r\n//     return (\r\n//         <div>\r\n//           Product\r\n//         </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default Product;\r\n"]},"metadata":{},"sourceType":"module"}