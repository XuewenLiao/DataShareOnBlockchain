{"ast":null,"code":"const BufferList = require('bl/BufferList');\n\nconst Reader = require('it-reader');\n\nmodule.exports = function LteReader(source) {\n  const reader = Reader(source);\n  let overflow;\n  const lteReader = {\n    [Symbol.asyncIterator]: () => lteReader,\n\n    async next(bytes) {\n      if (overflow) {\n        let value;\n\n        if (bytes == null || overflow.length === bytes) {\n          value = overflow;\n          overflow = null;\n        } else if (overflow.length > bytes) {\n          value = overflow.shallowSlice(0, bytes);\n          overflow = overflow.shallowSlice(bytes);\n        } else if (overflow.length < bytes) {\n          const _ref = await reader.next(bytes - overflow.length),\n                nextValue = _ref.value,\n                done = _ref.done;\n\n          if (done) {\n            throw Object.assign(new Error(\"stream ended before \".concat(bytes - overflow.length, \" bytes became available\")), {\n              code: 'ERR_UNDER_READ'\n            });\n          }\n\n          value = new BufferList([overflow, nextValue]);\n          overflow = null;\n        }\n\n        return {\n          value\n        };\n      }\n\n      return reader.next(bytes);\n    },\n\n    async nextLte(bytes) {\n      let _ref2 = await lteReader.next(),\n          done = _ref2.done,\n          value = _ref2.value;\n\n      if (done) return {\n        done\n      };\n      if (value.length <= bytes) return {\n        value\n      };\n      value = BufferList.isBufferList(value) ? value : new BufferList(value);\n\n      if (overflow) {\n        overflow.append(value.shallowSlice(bytes));\n      } else {\n        overflow = value.shallowSlice(bytes);\n      }\n\n      return {\n        value: value.shallowSlice(0, bytes)\n      };\n    },\n\n    return() {\n      return reader.return();\n    }\n\n  };\n  return lteReader;\n};","map":null,"metadata":{},"sourceType":"script"}