{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst ndjson = require('iterable-ndjson');\n\nconst toIterable = require('stream-to-it/source');\n\nconst configure = require('../lib/configure');\n\nconst toCamelWithMetadata = require('../lib/object-to-camel-with-metadata');\n\nmodule.exports = configure(({\n  ky\n}) => {\n  return async function* ls(path, options) {\n    if (typeof path !== 'string') {\n      options = path;\n      path = '/';\n    }\n\n    options = options || {};\n    const searchParams = new URLSearchParams(options.searchParams);\n    searchParams.set('arg', CID.isCID(path) ? \"/ipfs/\".concat(path) : path);\n    searchParams.set('stream', options.stream == null ? true : options.stream);\n    if (options.cidBase) searchParams.set('cid-base', options.cidBase);\n    searchParams.set('long', options.long == null ? true : options.long); // TODO: remove after go-ipfs 0.5 is released\n\n    searchParams.set('l', options.long == null ? true : options.long);\n    const res = await ky.post('files/ls', {\n      timeout: options.timeout,\n      signal: options.signal,\n      headers: options.headers,\n      searchParams\n    });\n\n    for await (const result of ndjson(toIterable(res.body))) {\n      // go-ipfs does not yet support the \"stream\" option\n      if ('Entries' in result) {\n        for (const entry of result.Entries || []) {\n          yield toCoreInterface(toCamelWithMetadata(entry));\n        }\n      } else {\n        yield toCoreInterface(toCamelWithMetadata(result));\n      }\n    }\n  };\n});\n\nfunction toCoreInterface(entry) {\n  if (entry.hash) entry.cid = new CID(entry.hash);\n  delete entry.hash;\n  return entry;\n}","map":null,"metadata":{},"sourceType":"script"}