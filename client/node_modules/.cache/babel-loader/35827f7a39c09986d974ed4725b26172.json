{"ast":null,"code":"'use strict';\n\nconst Block = require('ipfs-block');\n\nconst CID = require('cids');\n\nconst multihash = require('multihashes');\n\nconst configure = require('../lib/configure');\n\nconst toFormData = require('../lib/buffer-to-form-data');\n\nmodule.exports = configure(({\n  ky\n}) => {\n  async function put(data, options) {\n    options = options || {};\n\n    if (Block.isBlock(data)) {\n      const _multihash$decode = multihash.decode(data.cid.multihash),\n            name = _multihash$decode.name,\n            length = _multihash$decode.length;\n\n      options = { ...options,\n        format: data.cid.codec,\n        mhtype: name,\n        mhlen: length,\n        version: data.cid.version\n      };\n      data = data.data;\n    } else if (options.cid) {\n      const cid = new CID(options.cid);\n\n      const _multihash$decode2 = multihash.decode(cid.multihash),\n            name = _multihash$decode2.name,\n            length = _multihash$decode2.length;\n\n      options = { ...options,\n        format: cid.codec,\n        mhtype: name,\n        mhlen: length,\n        version: cid.version\n      };\n      delete options.cid;\n    }\n\n    const searchParams = new URLSearchParams(options.searchParams);\n    if (options.format) searchParams.set('format', options.format);\n    if (options.mhtype) searchParams.set('mhtype', options.mhtype);\n    if (options.mhlen) searchParams.set('mhlen', options.mhlen);\n    if (options.pin != null) searchParams.set('pin', options.pin);\n    if (options.version != null) searchParams.set('version', options.version);\n    let res;\n\n    try {\n      res = await ky.post('block/put', {\n        timeout: options.timeout,\n        signal: options.signal,\n        headers: options.headers,\n        searchParams,\n        body: toFormData(data)\n      }).json();\n    } catch (err) {\n      // Retry with \"protobuf\"/\"cbor\" format for go-ipfs\n      // TODO: remove when https://github.com/ipfs/go-cid/issues/75 resolved\n      if (options.format === 'dag-pb') {\n        return put(data, { ...options,\n          format: 'protobuf'\n        });\n      } else if (options.format === 'dag-cbor') {\n        return put(data, { ...options,\n          format: 'cbor'\n        });\n      }\n\n      throw err;\n    }\n\n    return new Block(data, new CID(res.Key));\n  }\n\n  return put;\n});","map":null,"metadata":{},"sourceType":"script"}