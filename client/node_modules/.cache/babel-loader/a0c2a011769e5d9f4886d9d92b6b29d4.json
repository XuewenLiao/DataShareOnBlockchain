{"ast":null,"code":"'use strict';\n\nconst multiaddr = require('multiaddr');\n\nconst configure = require('../lib/configure');\n\nmodule.exports = configure(({\n  ky\n}) => {\n  return async options => {\n    options = options || {};\n    const searchParams = new URLSearchParams(options.searchParams);\n    if (options.direction != null) searchParams.append('direction', options.direction);\n    if (options.latency != null) searchParams.append('latency', options.latency);\n    if (options.streams != null) searchParams.append('streams', options.streams);\n    if (options.verbose != null) searchParams.append('verbose', options.verbose);\n    const res = await ky.post('swarm/peers', {\n      timeout: options.timeout,\n      signal: options.signal,\n      headers: options.headers,\n      searchParams\n    }).json();\n    return (res.Peers || []).map(peer => {\n      const info = {};\n\n      try {\n        info.addr = multiaddr(peer.Addr);\n        info.peer = peer.Peer;\n      } catch (error) {\n        info.error = error;\n        info.rawPeerInfo = peer;\n      }\n\n      if (peer.Muxer) {\n        info.muxer = peer.Muxer;\n      }\n\n      if (peer.Latency) {\n        info.latency = peer.Latency;\n      }\n\n      if (peer.Streams) {\n        info.streams = peer.Streams;\n      }\n\n      if (peer.Direction != null) {\n        info.direction = peer.Direction;\n      }\n\n      return info;\n    });\n  };\n});","map":null,"metadata":{},"sourceType":"script"}