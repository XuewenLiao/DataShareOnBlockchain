{"ast":null,"code":"'use strict';\n\nconst ndjson = require('iterable-ndjson');\n\nconst CID = require('cids');\n\nconst configure = require('../lib/configure');\n\nconst toIterable = require('stream-to-it/source');\n\nconst _require = require('./form-data'),\n      toFormData = _require.toFormData;\n\nconst toCamel = require('../lib/object-to-camel');\n\nmodule.exports = configure(({\n  ky\n}) => {\n  return async function* add(input, options) {\n    options = options || {};\n    const searchParams = new URLSearchParams(options.searchParams);\n    searchParams.set('stream-channels', true);\n    if (options.chunker) searchParams.set('chunker', options.chunker);\n    if (options.cidVersion) searchParams.set('cid-version', options.cidVersion);\n    if (options.cidBase) searchParams.set('cid-base', options.cidBase);\n    if (options.enableShardingExperiment != null) searchParams.set('enable-sharding-experiment', options.enableShardingExperiment);\n    if (options.hashAlg) searchParams.set('hash', options.hashAlg);\n    if (options.onlyHash != null) searchParams.set('only-hash', options.onlyHash);\n    if (options.pin != null) searchParams.set('pin', options.pin);\n    if (options.progress) searchParams.set('progress', true);\n    if (options.quiet != null) searchParams.set('quiet', options.quiet);\n    if (options.quieter != null) searchParams.set('quieter', options.quieter);\n    if (options.rawLeaves != null) searchParams.set('raw-leaves', options.rawLeaves);\n    if (options.shardSplitThreshold) searchParams.set('shard-split-threshold', options.shardSplitThreshold);\n    if (options.silent) searchParams.set('silent', options.silent);\n    if (options.trickle != null) searchParams.set('trickle', options.trickle);\n    if (options.wrapWithDirectory != null) searchParams.set('wrap-with-directory', options.wrapWithDirectory);\n    if (options.preload != null) searchParams.set('preload', options.preload);\n    if (options.fileImportConcurrency != null) searchParams.set('file-import-concurrency', options.fileImportConcurrency);\n    if (options.blockWriteConcurrency != null) searchParams.set('block-write-concurrency', options.blockWriteConcurrency);\n    const res = await ky.post('add', {\n      timeout: options.timeout,\n      signal: options.signal,\n      headers: options.headers,\n      searchParams,\n      body: await toFormData(input)\n    });\n\n    for await (let file of ndjson(toIterable(res.body))) {\n      file = toCamel(file);\n\n      if (options.progress && file.bytes) {\n        options.progress(file.bytes);\n      } else {\n        yield toCoreInterface(file);\n      }\n    }\n  };\n});\n\nfunction toCoreInterface({\n  name,\n  hash,\n  size,\n  mode,\n  mtime,\n  mtimeNsecs\n}) {\n  const output = {\n    path: name,\n    cid: new CID(hash),\n    size: parseInt(size)\n  };\n\n  if (mode != null) {\n    output.mode = parseInt(mode, 8);\n  }\n\n  if (mtime != null) {\n    output.mtime = {\n      secs: mtime,\n      nsecs: mtimeNsecs || 0\n    };\n  }\n\n  return output;\n}","map":null,"metadata":{},"sourceType":"script"}