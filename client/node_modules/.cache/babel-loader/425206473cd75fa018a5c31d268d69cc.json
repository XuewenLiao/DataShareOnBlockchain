{"ast":null,"code":"'use strict';\n\nconst _require = require('buffer'),\n      Buffer = _require.Buffer;\n\nconst CID = require('cids');\n\nconst multiaddr = require('multiaddr');\n\nconst ndjson = require('iterable-ndjson');\n\nconst configure = require('../lib/configure');\n\nconst toIterable = require('stream-to-it/source');\n\nmodule.exports = configure(({\n  ky\n}) => {\n  return async function findPeer(peerId, options) {\n    options = options || {};\n    const searchParams = new URLSearchParams(options.searchParams);\n    searchParams.set('arg', \"\".concat(Buffer.isBuffer(peerId) ? new CID(peerId) : peerId));\n    if (options.verbose != null) searchParams.set('verbose', options.verbose);\n    const res = await ky.post('dht/findpeer', {\n      timeout: options.timeout,\n      signal: options.signal,\n      headers: options.headers,\n      searchParams\n    });\n\n    for await (const message of ndjson(toIterable(res.body))) {\n      // 3 = QueryError\n      // https://github.com/libp2p/go-libp2p-core/blob/6e566d10f4a5447317a66d64c7459954b969bdab/routing/query.go#L18\n      // https://github.com/ipfs/go-ipfs/blob/eb11f569b064b960d1aba4b5b8ca155a3bd2cb21/core/commands/dht.go#L388-L389\n      if (message.Type === 3) {\n        throw new Error(message.Extra);\n      } // 2 = FinalPeer\n      // https://github.com/libp2p/go-libp2p-core/blob/6e566d10f4a5447317a66d64c7459954b969bdab/routing/query.go#L18\n\n\n      if (message.Type === 2 && message.Responses) {\n        // There will only be 1:\n        // https://github.com/ipfs/go-ipfs/blob/eb11f569b064b960d1aba4b5b8ca155a3bd2cb21/core/commands/dht.go#L395-L396\n        for (const _ref of message.Responses) {\n          const ID = _ref.ID;\n          const Addrs = _ref.Addrs;\n          return {\n            id: ID,\n            addrs: (Addrs || []).map(a => multiaddr(a))\n          };\n        }\n      }\n    }\n\n    throw new Error('not found');\n  };\n});","map":null,"metadata":{},"sourceType":"script"}