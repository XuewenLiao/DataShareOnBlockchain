{"ast":null,"code":"'use strict';\n\nconst _require = require('buffer'),\n      Buffer = _require.Buffer;\n\nconst ndjson = require('iterable-ndjson');\n\nconst toIterable = require('stream-to-it/source');\n\nconst encodeBufferURIComponent = require('../lib/encode-buffer-uri-component');\n\nconst configure = require('../lib/configure');\n\nmodule.exports = configure(({\n  ky\n}) => {\n  return async function get(key, options) {\n    options = options || {};\n    const searchParams = new URLSearchParams(options.searchParams);\n    if (options.verbose != null) searchParams.set('verbose', options.verbose);\n\n    if (!Buffer.isBuffer(key)) {\n      throw new Error('invalid key');\n    }\n\n    const res = await ky.post(\"dht/get?key=\".concat(encodeBufferURIComponent(key), \"&\").concat(searchParams), {\n      timeout: options.timeout,\n      signal: options.signal,\n      headers: options.headers\n    });\n\n    for await (const message of ndjson(toIterable(res.body))) {\n      // 3 = QueryError\n      // https://github.com/libp2p/go-libp2p-core/blob/6e566d10f4a5447317a66d64c7459954b969bdab/routing/query.go#L18\n      // https://github.com/ipfs/go-ipfs/blob/eb11f569b064b960d1aba4b5b8ca155a3bd2cb21/core/commands/dht.go#L472-L473\n      if (message.Type === 3) {\n        throw new Error(message.Extra);\n      } // 5 = Value\n      // https://github.com/libp2p/go-libp2p-core/blob/6e566d10f4a5447317a66d64c7459954b969bdab/routing/query.go#L21\n\n\n      if (message.Type === 5) {\n        return message.Extra;\n      }\n    }\n\n    throw new Error('not found');\n  };\n});","map":null,"metadata":{},"sourceType":"script"}