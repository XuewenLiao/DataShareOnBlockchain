{"ast":null,"code":"'use strict';\n\nconst configure = require('./lib/configure');\n\nconst Tar = require('it-tar');\n\nconst _require = require('buffer'),\n      Buffer = _require.Buffer;\n\nconst CID = require('cids');\n\nconst toIterable = require('stream-to-it/source');\n\nmodule.exports = configure(({\n  ky\n}) => {\n  return async function* get(path, options) {\n    options = options || {};\n    const searchParams = new URLSearchParams();\n    searchParams.set('arg', \"\".concat(Buffer.isBuffer(path) ? new CID(path) : path));\n\n    if (options.compress !== undefined) {\n      searchParams.set('compress', options.compress);\n    }\n\n    if (options.compressionLevel !== undefined) {\n      searchParams.set('compression-level', options.compressionLevel);\n    }\n\n    if (options.offset) {\n      searchParams.set('offset', options.offset);\n    }\n\n    if (options.length) {\n      searchParams.set('length', options.length);\n    }\n\n    const res = await ky.post('get', {\n      timeout: options.timeout,\n      signal: options.signal,\n      headers: options.headers,\n      searchParams\n    });\n    const extractor = Tar.extract();\n\n    for await (const _ref of extractor(toIterable(res.body))) {\n      const header = _ref.header;\n      const body = _ref.body;\n\n      if (header.type === 'directory') {\n        yield {\n          path: header.name\n        };\n      } else {\n        yield {\n          path: header.name,\n          content: body\n        };\n      }\n    }\n  };\n});","map":null,"metadata":{},"sourceType":"script"}