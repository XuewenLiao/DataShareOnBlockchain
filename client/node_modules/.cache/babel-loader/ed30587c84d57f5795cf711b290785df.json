{"ast":null,"code":"'use strict';\n\nconst AbortController = require('abort-controller');\n\nclass SubscriptionTracker {\n  constructor() {\n    this._subs = new Map();\n  }\n\n  static singleton() {\n    if (SubscriptionTracker.instance) return SubscriptionTracker.instance;\n    SubscriptionTracker.instance = new SubscriptionTracker();\n    return SubscriptionTracker.instance;\n  }\n\n  subscribe(topic, handler, signal) {\n    const topicSubs = this._subs.get(topic) || [];\n\n    if (topicSubs.find(s => s.handler === handler)) {\n      throw new Error(\"Already subscribed to \".concat(topic, \" with this handler\"));\n    } // Create controller so a call to unsubscribe can cancel the request\n\n\n    const controller = new AbortController();\n\n    this._subs.set(topic, [{\n      handler,\n      controller\n    }].concat(topicSubs)); // If there is an external signal, forward the abort event\n\n\n    if (signal) {\n      signal.addEventListener('abort', () => this.unsubscribe(topic, handler));\n    }\n\n    return controller.signal;\n  }\n\n  unsubscribe(topic, handler) {\n    const subs = this._subs.get(topic) || [];\n    let unsubs;\n\n    if (handler) {\n      this._subs.set(topic, subs.filter(s => s.handler !== handler));\n\n      unsubs = subs.filter(s => s.handler === handler);\n    } else {\n      this._subs.set(topic, []);\n\n      unsubs = subs;\n    }\n\n    unsubs.forEach(s => s.controller.abort());\n  }\n\n}\n\nmodule.exports = SubscriptionTracker;","map":null,"metadata":{},"sourceType":"script"}