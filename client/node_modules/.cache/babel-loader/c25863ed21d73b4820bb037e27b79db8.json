{"ast":null,"code":"'use strict';\n/* eslint-env browser */\n\nconst normaliseInput = require('ipfs-utils/src/files/normalise-input');\n\nconst mtimeToObject = require('../lib/mtime-to-object');\n\nexports.toFormData = async input => {\n  const files = normaliseInput(input);\n  const formData = new FormData();\n  let i = 0;\n\n  for await (const file of files) {\n    const headers = {};\n\n    if (file.mtime !== undefined && file.mtime !== null) {\n      const mtime = mtimeToObject(file.mtime);\n\n      if (mtime) {\n        headers.mtime = mtime.secs;\n        headers['mtime-nsecs'] = mtime.nsecs;\n      }\n    }\n\n    if (file.mode !== undefined && file.mode !== null) {\n      headers.mode = file.mode.toString(8).padStart(4, '0');\n    }\n\n    if (file.content) {\n      // In the browser there's _currently_ no streaming upload, buffer up our\n      // async iterator chunks and append a big Blob :(\n      // One day, this will be browser streams\n      const bufs = [];\n\n      for await (const chunk of file.content) {\n        bufs.push(chunk);\n      }\n\n      formData.append(\"file-\".concat(i), new Blob(bufs, {\n        type: 'application/octet-stream'\n      }), encodeURIComponent(file.path), {\n        header: headers\n      });\n    } else {\n      formData.append(\"dir-\".concat(i), new Blob([], {\n        type: 'application/x-directory'\n      }), encodeURIComponent(file.path), {\n        header: headers\n      });\n    }\n\n    i++;\n  }\n\n  return formData;\n};","map":null,"metadata":{},"sourceType":"script"}