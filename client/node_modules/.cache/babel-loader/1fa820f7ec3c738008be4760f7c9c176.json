{"ast":null,"code":"'use strict';\n\nconst dagCBOR = require('ipld-dag-cbor');\n\nconst CID = require('cids');\n\nconst multihash = require('multihashes');\n\nconst configure = require('../lib/configure');\n\nconst toFormData = require('../lib/buffer-to-form-data');\n\nmodule.exports = configure(({\n  ky\n}) => {\n  return async (dagNode, options) => {\n    options = options || {};\n\n    if (options.hash) {\n      options.hashAlg = options.hash;\n      delete options.hash;\n    }\n\n    if (options.cid && (options.format || options.hashAlg)) {\n      throw new Error('Failed to put DAG node. Provide either `cid` OR `format` and `hashAlg` options');\n    } else if (options.format && !options.hashAlg || !options.format && options.hashAlg) {\n      throw new Error('Failed to put DAG node. Provide `format` AND `hashAlg` options');\n    }\n\n    if (options.cid) {\n      const cid = new CID(options.cid);\n      options = { ...options,\n        format: cid.codec,\n        hashAlg: multihash.decode(cid.multihash).name\n      };\n      delete options.cid;\n    }\n\n    options = {\n      format: 'dag-cbor',\n      hashAlg: 'sha2-256',\n      inputEnc: 'raw',\n      ...options\n    };\n    let serialized;\n\n    if (options.format === 'dag-cbor') {\n      serialized = dagCBOR.util.serialize(dagNode);\n    } else if (options.format === 'dag-pb') {\n      serialized = dagNode.serialize();\n    } else {\n      // FIXME Hopefully already serialized...can we use IPLD to serialise instead?\n      serialized = dagNode;\n    }\n\n    const searchParams = new URLSearchParams(options.searchParams);\n    searchParams.set('format', options.format);\n    searchParams.set('hash', options.hashAlg);\n    searchParams.set('input-enc', options.inputEnc);\n    if (options.pin != null) searchParams.set('pin', options.pin);\n    const res = await ky.post('dag/put', {\n      timeout: options.timeout,\n      signal: options.signal,\n      headers: options.headers,\n      searchParams,\n      body: toFormData(serialized)\n    }).json();\n    return new CID(res.Cid['/']);\n  };\n});","map":null,"metadata":{},"sourceType":"script"}