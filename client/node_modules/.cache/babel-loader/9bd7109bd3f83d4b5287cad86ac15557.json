{"ast":null,"code":"'use strict';\n\nconst _require = require('buffer'),\n      Buffer = _require.Buffer;\n\nconst CID = require('cids');\n\nconst multiaddr = require('multiaddr');\n\nconst ndjson = require('iterable-ndjson');\n\nconst configure = require('../lib/configure');\n\nconst toIterable = require('stream-to-it/source');\n\nconst encodeBufferURIComponent = require('../lib/encode-buffer-uri-component');\n\nconst toCamel = require('../lib/object-to-camel');\n\nmodule.exports = configure(({\n  ky\n}) => {\n  return async function* put(key, value, options) {\n    options = options || {};\n    const searchParams = new URLSearchParams(options.searchParams);\n    if (options.verbose != null) searchParams.set('verbose', options.verbose);\n    key = Buffer.isBuffer(key) ? encodeBufferURIComponent(key) : encodeURIComponent(key);\n    value = Buffer.isBuffer(value) ? encodeBufferURIComponent(value) : encodeURIComponent(value);\n    const url = \"dht/put?arg=\".concat(key, \"&arg=\").concat(value, \"&\").concat(searchParams);\n    const res = await ky.post(url, {\n      timeout: options.timeout,\n      signal: options.signal,\n      headers: options.headers\n    });\n\n    for await (let message of ndjson(toIterable(res.body))) {\n      // 3 = QueryError\n      // https://github.com/libp2p/go-libp2p-core/blob/6e566d10f4a5447317a66d64c7459954b969bdab/routing/query.go#L18\n      // https://github.com/ipfs/go-ipfs/blob/eb11f569b064b960d1aba4b5b8ca155a3bd2cb21/core/commands/dht.go#L472-L473\n      if (message.Type === 3) {\n        throw new Error(message.Extra);\n      }\n\n      message = toCamel(message);\n      message.id = new CID(message.id);\n\n      if (message.responses) {\n        message.responses = message.responses.map(({\n          ID,\n          Addrs\n        }) => ({\n          id: ID,\n          addrs: (Addrs || []).map(a => multiaddr(a))\n        }));\n      }\n\n      yield message;\n    }\n  };\n});","map":null,"metadata":{},"sourceType":"script"}