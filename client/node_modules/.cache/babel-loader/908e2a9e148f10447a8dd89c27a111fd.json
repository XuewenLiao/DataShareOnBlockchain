{"ast":null,"code":"'use strict';\n/* eslint-env browser */\n\nconst ky = require('ky-universal').default;\n\nconst _require = require('ipfs-utils/src/env'),\n      isBrowser = _require.isBrowser,\n      isWebWorker = _require.isWebWorker;\n\nconst toUri = require('multiaddr-to-uri');\n\nconst errorHandler = require('./error-handler');\n\nconst mergeOptions = require('merge-options').bind({\n  ignoreUndefined: true\n});\n\nconst parseDuration = require('parse-duration'); // Set default configuration and call create function with them\n\n\nmodule.exports = create => config => {\n  config = config || {};\n\n  if (typeof config === 'string') {\n    config = {\n      apiAddr: config\n    };\n  } else if (config.constructor && config.constructor.isMultiaddr) {\n    config = {\n      apiAddr: config\n    };\n  } else {\n    config = { ...config\n    };\n  }\n\n  config.apiAddr = (config.apiAddr || getDefaultApiAddr(config)).toString();\n  config.apiAddr = config.apiAddr.startsWith('/') ? toUri(config.apiAddr) : config.apiAddr;\n  config.apiAddr = trimEnd(config.apiAddr, '/');\n  const apiAddrPath = getNonRootPath(config.apiAddr); // Use configured apiPath, or path on the end of apiAddr (if there is one) or default to /api/v0\n\n  config.apiPath = config.apiPath || config['api-path'] || apiAddrPath || '/api/v0';\n  config.apiPath = trimEnd(config.apiPath, '/'); // If user passed apiAddr with a path, trim it from the end (it is now apiPath)\n\n  config.apiAddr = apiAddrPath ? trimEnd(config.apiAddr, apiAddrPath) : config.apiAddr;\n  const defaults = {\n    prefixUrl: config.apiAddr + config.apiPath,\n    timeout: parseTimeout(config.timeout) || 60000 * 20,\n    headers: config.headers,\n    hooks: {\n      afterResponse: [errorHandler]\n    }\n  };\n  const k = ky.extend(defaults);\n  const client = ['get', 'post', 'put', 'delete', 'patch', 'head'].reduce((client, key) => {\n    client[key] = wrap(k[key], defaults);\n    return client;\n  }, wrap(k, defaults));\n  return create({\n    ky: client,\n    ...config\n  });\n};\n\nfunction getDefaultApiAddr({\n  protocol,\n  host,\n  port\n}) {\n  if (isBrowser || isWebWorker) {\n    if (!protocol) {\n      protocol = location.protocol.startsWith('http') ? trimEnd(location.protocol, ':') : 'http';\n    }\n\n    host = host || location.hostname;\n    port = port || location.port;\n    return \"\".concat(protocol, \"://\").concat(host).concat(port ? ':' + port : '');\n  }\n\n  return \"\".concat(protocol || 'http', \"://\").concat(host || 'localhost', \":\").concat(port || 5001);\n} // returns the passed function wrapped in a function that ignores\n// undefined values in the passed `options` object\n\n\nfunction wrap(fn, defaults) {\n  return (input, options) => {\n    if (options.timeout) options.timeout = parseTimeout(options.timeout);\n    return fn(input, mergeOptions(defaults, options));\n  };\n}\n\nfunction parseTimeout(value) {\n  return typeof value === 'string' ? parseDuration(value) : value;\n}\n\nconst trimEnd = (str, end) => str.endsWith(end) ? str.slice(0, -end.length) : str; // Get the path from a URL is it is not /\n\n\nfunction getNonRootPath(url) {\n  if (url) {\n    const _ref = new URL(url),\n          pathname = _ref.pathname;\n\n    return pathname === '/' ? null : pathname;\n  }\n}","map":null,"metadata":{},"sourceType":"script"}