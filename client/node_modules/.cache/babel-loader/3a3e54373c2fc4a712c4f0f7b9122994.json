{"ast":null,"code":"const defer = require('p-defer');\n\nconst Headers = require('./extract-headers');\n\nconst LteReader = require('./lte-reader');\n\nfunction getPadding(size) {\n  size &= 511;\n  return size && 512 - size;\n}\n\nasync function discardPadding(reader, size) {\n  const overflow = getPadding(size);\n  if (overflow) await reader.next(overflow);\n}\n\nmodule.exports = options => {\n  options = options || {};\n  options.highWaterMark = options.highWaterMark || 1024 * 16;\n  return source => async function* () {\n    const reader = LteReader(source);\n    let gnuLongPath, gnuLongLinkPath, paxGlobal, pax;\n\n    try {\n      while (true) {\n        let headerBytes;\n\n        try {\n          const _ref = await reader.next(512),\n                done = _ref.done,\n                value = _ref.value;\n\n          if (done) return;\n          headerBytes = value;\n        } catch (err) {\n          // Is ok, this is the end of the stream!\n          if (err.code === 'ERR_UNDER_READ') return;\n          throw err;\n        }\n\n        const header = Headers.decode(headerBytes, options.filenameEncoding);\n        if (!header) continue;\n\n        if (header.type === 'gnu-long-path') {\n          const _ref2 = await reader.next(header.size),\n                done = _ref2.done,\n                gnuLongPathBytes = _ref2.value;\n\n          if (done) return;\n          gnuLongPath = Headers.decodeLongPath(gnuLongPathBytes, options.filenameEncoding);\n          await discardPadding(reader, header.size);\n          continue;\n        }\n\n        if (header.type === 'gnu-long-link-path') {\n          const _ref3 = await reader.next(header.size),\n                done = _ref3.done,\n                gnuLongLinkPathBytes = _ref3.value;\n\n          if (done) return;\n          gnuLongLinkPath = Headers.decodeLongPath(gnuLongLinkPathBytes, options.filenameEncoding);\n          await discardPadding(reader, header.size);\n          continue;\n        }\n\n        if (header.type === 'pax-global-header') {\n          const _ref4 = await reader.next(header.size),\n                done = _ref4.done,\n                paxGlobalBytes = _ref4.value;\n\n          if (done) return;\n          paxGlobal = Headers.decodePax(paxGlobalBytes, options.filenameEncoding);\n          await discardPadding(reader, header.size);\n          continue;\n        }\n\n        if (header.type === 'pax-header') {\n          const _ref5 = await reader.next(header.size),\n                done = _ref5.done,\n                paxBytes = _ref5.value;\n\n          if (done) return;\n          pax = Headers.decodePax(paxBytes, options.filenameEncoding);\n          if (paxGlobal) pax = { ...paxGlobal,\n            ...pax\n          };\n          await discardPadding(reader, header.size);\n          continue;\n        }\n\n        if (gnuLongPath) {\n          header.name = gnuLongPath;\n          gnuLongPath = null;\n        }\n\n        if (gnuLongLinkPath) {\n          header.linkname = gnuLongLinkPath;\n          gnuLongLinkPath = null;\n        }\n\n        if (pax) {\n          if (pax.path) header.name = pax.path;\n          if (pax.linkpath) header.linkname = pax.linkpath;\n          if (pax.size) header.size = parseInt(pax.size, 10);\n          header.pax = pax;\n          pax = null;\n        }\n\n        if (!header.size || header.type === 'directory') {\n          yield {\n            header,\n            body: async function* () {}()\n          };\n          continue;\n        }\n\n        let bytesRemaining = header.size;\n        const bodyConsumed = defer(); // Prefetch the first chunk.\n        // This allows us to stream entries for small files from the tar without\n        // explicitly streaming the body of each.\n\n        const firstChunk = await reader.nextLte(Math.min(bytesRemaining, options.highWaterMark));\n        bytesRemaining -= firstChunk.value.length;\n        if (!bytesRemaining) bodyConsumed.resolve();\n\n        const body = async function* () {\n          try {\n            yield firstChunk.value;\n\n            while (bytesRemaining) {\n              const _ref6 = await reader.nextLte(bytesRemaining),\n                    done = _ref6.done,\n                    value = _ref6.value;\n\n              if (done) {\n                bytesRemaining = 0;\n                return;\n              }\n\n              bytesRemaining -= value.length;\n              yield value;\n            }\n          } finally {\n            bodyConsumed.resolve();\n          }\n        }();\n\n        yield {\n          header,\n          body\n        }; // Wait for the body to be consumed\n\n        await bodyConsumed.promise; // Incase the body was not consumed entirely...\n\n        if (bytesRemaining) {\n          for await (const _ of body) {} // eslint-disable-line no-unused-vars\n\n        }\n\n        await discardPadding(reader, header.size);\n      }\n    } finally {\n      await reader.return();\n    }\n  }();\n};","map":null,"metadata":{},"sourceType":"script"}