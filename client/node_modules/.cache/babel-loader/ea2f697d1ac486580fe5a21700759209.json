{"ast":null,"code":"var _jsxFileName = \"D:\\\\LXW\\\\truffle_proj\\\\qodpro\\\\dataTruffleSys\\\\client\\\\src\\\\views\\\\UploadManage.js\";\nimport Button from 'antd/lib/button';\nimport { getOrigData } from '../methodTool';\n\nconst React = require('react');\n\nconst ipfsClient = require('ipfs-http-client');\n\nconst ipfs = ipfsClient('/ip4/127.0.0.1/tcp/5001'); // const stringToUse = 'hello world from webpacked IPFS'\n// const origData = []\n\nlet origData;\n\nclass UploadManage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.start = () => {\n      getOrigData().then(res => {\n        console.log(\"res==\", res); // origData = res\n\n        this.setState({\n          // origData: [...res, origData.map(val => {\n          //   // val.key = val.id;\n          //   return val;\n          // })],\n          origData: res\n        });\n        console.log(\"origData==\", this.state.origData);\n        console.log(\"type==\", typeof this.state.origData);\n        alert(this.state.origData[0].uaddress);\n      });\n    };\n\n    this.uploadIpfs = async origData => {\n      console.log(\" uploadorigData==\", origData);\n      console.log(\" uploadtype==\", typeof origData);\n\n      for (var i in origData) {\n        // console.log(\"eachData==\",JSON.stringify(origData[i]));\n        // console.log(\"eachDataType==\",typeof(origData[i]));\n        let source = JSON.stringify(origData[i]['datacontent']);\n        console.log(\"eachData.datacontent==\", source); //上传IPFS获取hash\n        // for  (const file of source) {\n        //   console.log(\"file\", file)\n        //   const hash = file.path\n        //   console.log(\"file_hash: \", hash)\n        //   //将Hash存到origData的ipfsdatahash字段\n        //   origData[i].ipfsdatahash = hash\n        //   console.log(\"origData[i]==\",origData[i])\n        // }\n      }\n\n      this.setState({\n        isSuccess: \"成功\"\n      });\n      console.log(\"newData==\", origData);\n    };\n\n    this.state = {\n      isSuccess: null,\n      origData: null // origData: []\n      // added_file_hash: null,\n      // id: null,\n      // version: null,\n      // protocol_version: null,\n      // added_file_contents: null\n\n    };\n  }\n\n  componentDidMount() {\n    // origData = getOrigData();\n    // console.log(\"origData==\",origData);\n    // alert(origData);\n    this.start();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      style: {\n        textAlign: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      onClick: () => this.uploadIpfs(this.state.origData),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"\\u4E0A\\u4F20\\u81F3IPFS\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"\\u4E0A\\u4F20\\u72B6\\u6001\\uFF1A \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, JSON.stringify(this.state.origData))));\n  }\n\n}\n\nexport default UploadManage; // import React, { Component } from \"react\";\n// class Product extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = { };\n//   }\n//   render() {\n//     return (\n//         <div>\n//           Product\n//         </div>\n//     );\n//   }\n// }\n// export default Product;","map":{"version":3,"sources":["D:\\LXW\\truffle_proj\\qodpro\\dataTruffleSys\\client\\src\\views\\UploadManage.js"],"names":["Button","getOrigData","React","require","ipfsClient","ipfs","origData","UploadManage","Component","constructor","props","start","then","res","console","log","setState","state","alert","uaddress","uploadIpfs","i","source","JSON","stringify","isSuccess","componentDidMount","render","textAlign"],"mappings":";AAAA,OAAOA,MAAP,MAAmB,iBAAnB;AACA,SAASC,WAAT,QAA4B,eAA5B;;AACA,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEA,MAAMC,UAAU,GAAGD,OAAO,CAAC,kBAAD,CAA1B;;AACA,MAAME,IAAI,GAAGD,UAAU,CAAC,yBAAD,CAAvB,C,CACA;AAEA;;AACA,IAAIE,QAAJ;;AACA,MAAMC,YAAN,SAA2BL,KAAK,CAACM,SAAjC,CAA2C;AACzCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAsBnBC,KAtBmB,GAsBX,MAAM;AACZV,MAAAA,WAAW,GAAGW,IAAd,CAAmBC,GAAG,IAAI;AACxBC,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,GAArB,EADwB,CAExB;;AACA,aAAKG,QAAL,CAAc;AACZ;AACA;AACA;AACA;AACAV,UAAAA,QAAQ,EAAEO;AALE,SAAd;AAOAC,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0B,KAAKE,KAAL,CAAWX,QAArC;AACAQ,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsB,OAAQ,KAAKE,KAAL,CAAWX,QAAzC;AACAY,QAAAA,KAAK,CAAC,KAAKD,KAAL,CAAWX,QAAX,CAAoB,CAApB,EAAuBa,QAAxB,CAAL;AACD,OAbD;AAeD,KAtCkB;;AAAA,SA0CnBC,UA1CmB,GA0CN,MAAOd,QAAP,IAAoB;AAC/BQ,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCT,QAAjC;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6B,OAAQT,QAArC;;AAEA,WAAK,IAAIe,CAAT,IAAcf,QAAd,EAAwB;AACtB;AACA;AACA,YAAIgB,MAAM,GAAGC,IAAI,CAACC,SAAL,CAAelB,QAAQ,CAACe,CAAD,CAAR,CAAY,aAAZ,CAAf,CAAb;AACAP,QAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCO,MAAtC,EAJsB,CAKtB;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACD;;AAED,WAAKN,QAAL,CAAc;AAAES,QAAAA,SAAS,EAAE;AAAb,OAAd;AACAX,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAwBT,QAAxB;AACD,KAjEkB;;AAEjB,SAAKW,KAAL,GAAa;AACXQ,MAAAA,SAAS,EAAE,IADA;AAEXnB,MAAAA,QAAQ,EAAE,IAFC,CAGX;AACA;AACA;AACA;AACA;AACA;;AARW,KAAb;AAUD;;AACDoB,EAAAA,iBAAiB,GAAG;AAClB;AACA;AACA;AACA,SAAKf,KAAL;AAED;;AAiDDgB,EAAAA,MAAM,GAAG;AACP,WAAO;AAAK,MAAA,KAAK,EAAE;AAAEC,QAAAA,SAAS,EAAE;AAAb,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACL,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,SAAb;AAAuB,MAAA,OAAO,EAAE,MAAM,KAAKR,UAAL,CAAgB,KAAKH,KAAL,CAAWX,QAA3B,CAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADK,EAEL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAASiB,IAAI,CAACC,SAAL,CAAe,KAAKP,KAAL,CAAWX,QAA1B,CAAT,CAAT,CAFK,CAAP;AAkBD;;AAxFwC;;AA0F3C,eAAeC,YAAf,C,CAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import Button from 'antd/lib/button';\r\nimport { getOrigData } from '../methodTool'\r\nconst React = require('react')\r\n\r\nconst ipfsClient = require('ipfs-http-client')\r\nconst ipfs = ipfsClient('/ip4/127.0.0.1/tcp/5001')\r\n// const stringToUse = 'hello world from webpacked IPFS'\r\n\r\n// const origData = []\r\nlet origData;\r\nclass UploadManage extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      isSuccess: null,\r\n      origData: null,\r\n      // origData: []\r\n      // added_file_hash: null,\r\n      // id: null,\r\n      // version: null,\r\n      // protocol_version: null,\r\n      // added_file_contents: null\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    // origData = getOrigData();\r\n    // console.log(\"origData==\",origData);\r\n    // alert(origData);\r\n    this.start();\r\n\r\n  }\r\n\r\n\r\n  start = () => {\r\n    getOrigData().then(res => {\r\n      console.log(\"res==\", res)\r\n      // origData = res\r\n      this.setState({\r\n        // origData: [...res, origData.map(val => {\r\n        //   // val.key = val.id;\r\n        //   return val;\r\n        // })],\r\n        origData: res\r\n      });\r\n      console.log(\"origData==\", this.state.origData);\r\n      console.log(\"type==\", typeof (this.state.origData));\r\n      alert(this.state.origData[0].uaddress);\r\n    })\r\n\r\n  };\r\n\r\n\r\n\r\n  uploadIpfs = async (origData) => {\r\n    console.log(\" uploadorigData==\", origData);\r\n    console.log(\" uploadtype==\", typeof (origData));\r\n\r\n    for (var i in origData) {\r\n      // console.log(\"eachData==\",JSON.stringify(origData[i]));\r\n      // console.log(\"eachDataType==\",typeof(origData[i]));\r\n      let source = JSON.stringify(origData[i]['datacontent']);\r\n      console.log(\"eachData.datacontent==\", source);\r\n      //上传IPFS获取hash\r\n      // for  (const file of source) {\r\n      //   console.log(\"file\", file)\r\n      //   const hash = file.path\r\n      //   console.log(\"file_hash: \", hash)\r\n\r\n      //   //将Hash存到origData的ipfsdatahash字段\r\n      //   origData[i].ipfsdatahash = hash\r\n      //   console.log(\"origData[i]==\",origData[i])\r\n      // }\r\n    }\r\n\r\n    this.setState({ isSuccess: \"成功\" })\r\n    console.log(\"newData==\",origData)\r\n  }\r\n\r\n\r\n  render() {\r\n    return <div style={{ textAlign: 'center' }}>\r\n      <Button type=\"primary\" onClick={() => this.uploadIpfs(this.state.origData)}>上传至IPFS</Button>\r\n      <p>上传状态： <strong>{JSON.stringify(this.state.origData)}</strong></p>\r\n      {/* <h1>Everything is working!</h1>\r\n      <p>Your ID is <strong>{this.state.id}</strong></p>\r\n      <p>Your IPFS version is <strong>{this.state.version}</strong></p>\r\n      <p>Your IPFS protocol version is <strong>{this.state.protocol_version}</strong></p>\r\n      <div>\r\n        <div>\r\n          Added a file! <br />\r\n          {this.state.added_file_hash}\r\n        </div>\r\n        <div>\r\n          Contents of this file: <br />\r\n          {this.state.added_file_contents}\r\n        </div>\r\n      </div> */}\r\n    </div>\r\n  }\r\n}\r\nexport default UploadManage\r\n\r\n\r\n// import React, { Component } from \"react\";\r\n\r\n// class Product extends Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//     this.state = { };\r\n//   }\r\n\r\n//   render() {\r\n//     return (\r\n//         <div>\r\n//           Product\r\n//         </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default Product;\r\n"]},"metadata":{},"sourceType":"module"}