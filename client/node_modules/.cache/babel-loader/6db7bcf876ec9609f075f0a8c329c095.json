{"ast":null,"code":"'use strict';\n\nconst _require = require('buffer'),\n      Buffer = _require.Buffer;\n\nconst CID = require('cids');\n\nconst ndjson = require('iterable-ndjson');\n\nconst toIterable = require('stream-to-it/source');\n\nconst configure = require('./lib/configure');\n\nmodule.exports = configure(({\n  ky\n}) => {\n  return async function* ls(path, options) {\n    options = options || {};\n    const searchParams = new URLSearchParams();\n    searchParams.set('arg', \"\".concat(Buffer.isBuffer(path) ? new CID(path) : path));\n    searchParams.set('stream', options.stream == null ? true : options.stream);\n    if (options.long != null) searchParams.set('long', options.long);\n    if (options.unsorted != null) searchParams.set('unsorted', options.unsorted);\n    if (options.recursive != null) searchParams.set('recursive', options.recursive);\n    const res = await ky.post('ls', {\n      timeout: options.timeout,\n      signal: options.signal,\n      headers: options.headers,\n      searchParams\n    });\n\n    for await (let result of ndjson(toIterable(res.body))) {\n      result = result.Objects;\n\n      if (!result) {\n        throw new Error('expected .Objects in results');\n      }\n\n      result = result[0];\n\n      if (!result) {\n        throw new Error('expected one array in results.Objects');\n      }\n\n      result = result.Links;\n\n      if (!Array.isArray(result)) {\n        throw new Error('expected one array in results.Objects[0].Links');\n      }\n\n      for (const link of result) {\n        const entry = {\n          name: link.Name,\n          path: path + '/' + link.Name,\n          size: link.Size,\n          cid: new CID(link.Hash),\n          type: typeOf(link),\n          depth: link.Depth || 1\n        };\n\n        if (link.Mode) {\n          entry.mode = parseInt(link.Mode, 8);\n        }\n\n        if (link.Mtime !== undefined && link.Mtime !== null) {\n          entry.mtime = {\n            secs: link.Mtime\n          };\n\n          if (link.MtimeNsecs !== undefined && link.MtimeNsecs !== null) {\n            entry.mtime.nsecs = link.MtimeNsecs;\n          }\n        }\n\n        yield entry;\n      }\n    }\n  };\n});\n\nfunction typeOf(link) {\n  switch (link.Type) {\n    case 1:\n    case 5:\n      return 'dir';\n\n    case 2:\n      return 'file';\n\n    default:\n      return 'unknown';\n  }\n}","map":null,"metadata":{},"sourceType":"script"}